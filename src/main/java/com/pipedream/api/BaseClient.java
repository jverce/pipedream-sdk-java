/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api;

import com.pipedream.api.core.ClientOptions;
import com.pipedream.api.core.Suppliers;
import com.pipedream.api.resources.accounts.AccountsClient;
import com.pipedream.api.resources.actions.ActionsClient;
import com.pipedream.api.resources.appcategories.AppCategoriesClient;
import com.pipedream.api.resources.apps.AppsClient;
import com.pipedream.api.resources.components.ComponentsClient;
import com.pipedream.api.resources.deployedtriggers.DeployedTriggersClient;
import com.pipedream.api.resources.oauthtokens.OauthTokensClient;
import com.pipedream.api.resources.projects.ProjectsClient;
import com.pipedream.api.resources.proxy.ProxyClient;
import com.pipedream.api.resources.tokens.TokensClient;
import com.pipedream.api.resources.triggers.TriggersClient;
import com.pipedream.api.resources.users.UsersClient;
import com.pipedream.api.resources.workflows.WorkflowsClient;
import java.util.function.Supplier;

public class BaseClient {
    protected final ClientOptions clientOptions;

    protected final Supplier<AppCategoriesClient> appCategoriesClient;

    protected final Supplier<AppsClient> appsClient;

    protected final Supplier<AccountsClient> accountsClient;

    protected final Supplier<UsersClient> usersClient;

    protected final Supplier<ComponentsClient> componentsClient;

    protected final Supplier<ActionsClient> actionsClient;

    protected final Supplier<TriggersClient> triggersClient;

    protected final Supplier<DeployedTriggersClient> deployedTriggersClient;

    protected final Supplier<ProjectsClient> projectsClient;

    protected final Supplier<ProxyClient> proxyClient;

    protected final Supplier<TokensClient> tokensClient;

    protected final Supplier<OauthTokensClient> oauthTokensClient;

    protected final Supplier<WorkflowsClient> workflowsClient;

    public BaseClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.appCategoriesClient = Suppliers.memoize(() -> new AppCategoriesClient(clientOptions));
        this.appsClient = Suppliers.memoize(() -> new AppsClient(clientOptions));
        this.accountsClient = Suppliers.memoize(() -> new AccountsClient(clientOptions));
        this.usersClient = Suppliers.memoize(() -> new UsersClient(clientOptions));
        this.componentsClient = Suppliers.memoize(() -> new ComponentsClient(clientOptions));
        this.actionsClient = Suppliers.memoize(() -> new ActionsClient(clientOptions));
        this.triggersClient = Suppliers.memoize(() -> new TriggersClient(clientOptions));
        this.deployedTriggersClient = Suppliers.memoize(() -> new DeployedTriggersClient(clientOptions));
        this.projectsClient = Suppliers.memoize(() -> new ProjectsClient(clientOptions));
        this.proxyClient = Suppliers.memoize(() -> new ProxyClient(clientOptions));
        this.tokensClient = Suppliers.memoize(() -> new TokensClient(clientOptions));
        this.oauthTokensClient = Suppliers.memoize(() -> new OauthTokensClient(clientOptions));
        this.workflowsClient = Suppliers.memoize(() -> new WorkflowsClient(clientOptions));
    }

    public AppCategoriesClient appCategories() {
        return this.appCategoriesClient.get();
    }

    public AppsClient apps() {
        return this.appsClient.get();
    }

    public AccountsClient accounts() {
        return this.accountsClient.get();
    }

    public UsersClient users() {
        return this.usersClient.get();
    }

    public ComponentsClient components() {
        return this.componentsClient.get();
    }

    public ActionsClient actions() {
        return this.actionsClient.get();
    }

    public TriggersClient triggers() {
        return this.triggersClient.get();
    }

    public DeployedTriggersClient deployedTriggers() {
        return this.deployedTriggersClient.get();
    }

    public ProjectsClient projects() {
        return this.projectsClient.get();
    }

    public ProxyClient proxy() {
        return this.proxyClient.get();
    }

    public TokensClient tokens() {
        return this.tokensClient.get();
    }

    public OauthTokensClient oauthTokens() {
        return this.oauthTokensClient.get();
    }

    public WorkflowsClient workflows() {
        return this.workflowsClient.get();
    }

    public static BaseClientBuilder builder() {
        return new BaseClientBuilder();
    }
}
