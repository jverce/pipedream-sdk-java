/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.resources.accounts;

import com.pipedream.api.core.BaseClientApiException;
import com.pipedream.api.core.BaseClientException;
import com.pipedream.api.core.BaseClientHttpResponse;
import com.pipedream.api.core.ClientOptions;
import com.pipedream.api.core.MediaTypes;
import com.pipedream.api.core.ObjectMappers;
import com.pipedream.api.core.QueryStringMapper;
import com.pipedream.api.core.RequestOptions;
import com.pipedream.api.core.pagination.SyncPagingIterable;
import com.pipedream.api.resources.accounts.requests.AccountsListRequest;
import com.pipedream.api.resources.accounts.requests.AccountsRetrieveRequest;
import com.pipedream.api.resources.accounts.requests.CreateAccountOpts;
import com.pipedream.api.types.Account;
import com.pipedream.api.types.ListAccountsResponse;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawAccountsClient {
    protected final ClientOptions clientOptions;

    public RawAccountsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public BaseClientHttpResponse<SyncPagingIterable<Account>> list() {
        return list(AccountsListRequest.builder().build());
    }

    public BaseClientHttpResponse<SyncPagingIterable<Account>> list(AccountsListRequest request) {
        return list(request, null);
    }

    public BaseClientHttpResponse<SyncPagingIterable<Account>> list(
            AccountsListRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("accounts");
        if (request.getAppId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "app_id", request.getAppId().get(), false);
        }
        if (request.getExternalUserId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "external_user_id", request.getExternalUserId().get(), false);
        }
        if (request.getOauthAppId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "oauth_app_id", request.getOauthAppId().get(), false);
        }
        if (request.getAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "after", request.getAfter().get(), false);
        }
        if (request.getBefore().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "before", request.getBefore().get(), false);
        }
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get(), false);
        }
        if (request.getIncludeCredentials().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "include_credentials",
                    request.getIncludeCredentials().get(),
                    false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                ListAccountsResponse parsedResponse =
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ListAccountsResponse.class);
                Optional<String> startingAfter = parsedResponse.getPageInfo().getEndCursor();
                AccountsListRequest nextRequest = AccountsListRequest.builder()
                        .from(request)
                        .after(startingAfter)
                        .build();
                List<Account> result = parsedResponse.getData();
                return new BaseClientHttpResponse<>(
                        new SyncPagingIterable<Account>(
                                startingAfter.isPresent(), result, () -> list(nextRequest, requestOptions)
                                        .body()),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new BaseClientApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new BaseClientException("Network error executing HTTP request", e);
        }
    }

    public BaseClientHttpResponse<Account> create(CreateAccountOpts request) {
        return create(request, null);
    }

    public BaseClientHttpResponse<Account> create(CreateAccountOpts request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("accounts");
        if (request.getAppId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "app_id", request.getAppId().get(), false);
        }
        if (request.getExternalUserId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "external_user_id", request.getExternalUserId().get(), false);
        }
        if (request.getOauthAppId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "oauth_app_id", request.getOauthAppId().get(), false);
        }
        Map<String, Object> properties = new HashMap<>();
        properties.put("app_slug", request.getAppSlug());
        properties.put("cfmap_json", request.getCfmapJson());
        properties.put("connect_token", request.getConnectToken());
        if (request.getName().isPresent()) {
            properties.put("name", request.getName());
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new BaseClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Account.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new BaseClientApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new BaseClientException("Network error executing HTTP request", e);
        }
    }

    public BaseClientHttpResponse<Account> retrieve(String accountId) {
        return retrieve(accountId, AccountsRetrieveRequest.builder().build());
    }

    public BaseClientHttpResponse<Account> retrieve(String accountId, AccountsRetrieveRequest request) {
        return retrieve(accountId, request, null);
    }

    public BaseClientHttpResponse<Account> retrieve(
            String accountId, AccountsRetrieveRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("accounts")
                .addPathSegment(accountId);
        if (request.getIncludeCredentials().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "include_credentials",
                    request.getIncludeCredentials().get(),
                    false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new BaseClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Account.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new BaseClientApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new BaseClientException("Network error executing HTTP request", e);
        }
    }

    public BaseClientHttpResponse<Void> delete(String accountId) {
        return delete(accountId, null);
    }

    public BaseClientHttpResponse<Void> delete(String accountId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("accounts")
                .addPathSegment(accountId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new BaseClientHttpResponse<>(null, response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new BaseClientApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new BaseClientException("Network error executing HTTP request", e);
        }
    }

    public BaseClientHttpResponse<Void> deleteByApp(String appId) {
        return deleteByApp(appId, null);
    }

    public BaseClientHttpResponse<Void> deleteByApp(String appId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("apps")
                .addPathSegment(appId)
                .addPathSegments("accounts")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new BaseClientHttpResponse<>(null, response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new BaseClientApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new BaseClientException("Network error executing HTTP request", e);
        }
    }
}
