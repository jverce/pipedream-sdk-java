/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.resources.proxy;

import com.pipedream.api.core.BaseClientApiException;
import com.pipedream.api.core.BaseClientException;
import com.pipedream.api.core.BaseClientHttpResponse;
import com.pipedream.api.core.ClientOptions;
import com.pipedream.api.core.MediaTypes;
import com.pipedream.api.core.ObjectMappers;
import com.pipedream.api.core.QueryStringMapper;
import com.pipedream.api.core.RequestOptions;
import com.pipedream.api.resources.proxy.requests.ProxyDeleteRequest;
import com.pipedream.api.resources.proxy.requests.ProxyGetRequest;
import com.pipedream.api.resources.proxy.requests.ProxyPatchRequest;
import com.pipedream.api.resources.proxy.requests.ProxyPostRequest;
import com.pipedream.api.resources.proxy.requests.ProxyPutRequest;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawProxyClient {
    protected final ClientOptions clientOptions;

    public AsyncRawProxyClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    private Object parseResponse(String responseBodyString) {
        if (responseBodyString == null || responseBodyString.trim().isEmpty()) {
            return null;
        }
        try {
            return ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class);
        } catch (Exception jsonException) {
            return responseBodyString;
        }
    }

    public CompletableFuture<BaseClientHttpResponse<Object>> get(String url64, ProxyGetRequest request) {
        return get(url64, request, null);
    }

    public CompletableFuture<BaseClientHttpResponse<Object>> get(
            String url64, ProxyGetRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("proxy")
                .addPathSegment(url64);
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        QueryStringMapper.addQueryParameter(httpUrl, "account_id", request.getAccountId(), false);
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<BaseClientHttpResponse<Object>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        String responseBodyString = responseBody != null ? responseBody.string() : null;
                        if (responseBodyString == null || responseBodyString.trim().isEmpty()) {
                            future.complete(new BaseClientHttpResponse<>(null, response));
                            return;
                        }
                        Object parsedResponse = parseResponse(responseBodyString);
                        future.complete(new BaseClientHttpResponse<>(parsedResponse, response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new BaseClientApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            parseResponse(responseBodyString),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new BaseClientException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new BaseClientException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<BaseClientHttpResponse<Object>> post(String url64, ProxyPostRequest request) {
        return post(url64, request, null);
    }

    public CompletableFuture<BaseClientHttpResponse<Object>> post(
            String url64, ProxyPostRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("proxy")
                .addPathSegment(url64);
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        QueryStringMapper.addQueryParameter(httpUrl, "account_id", request.getAccountId(), false);
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<BaseClientHttpResponse<Object>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        String responseBodyString = responseBody != null ? responseBody.string() : null;
                        if (responseBodyString == null || responseBodyString.trim().isEmpty()) {
                            future.complete(new BaseClientHttpResponse<>(null, response));
                            return;
                        }
                        Object parsedResponse = parseResponse(responseBodyString);
                        future.complete(new BaseClientHttpResponse<>(parsedResponse, response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new BaseClientApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            parseResponse(responseBodyString),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new BaseClientException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new BaseClientException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<BaseClientHttpResponse<Object>> put(String url64, ProxyPutRequest request) {
        return put(url64, request, null);
    }

    public CompletableFuture<BaseClientHttpResponse<Object>> put(
            String url64, ProxyPutRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("proxy")
                .addPathSegment(url64);
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        QueryStringMapper.addQueryParameter(httpUrl, "account_id", request.getAccountId(), false);
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<BaseClientHttpResponse<Object>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        String responseBodyString = responseBody != null ? responseBody.string() : null;
                        if (responseBodyString == null || responseBodyString.trim().isEmpty()) {
                            future.complete(new BaseClientHttpResponse<>(null, response));
                            return;
                        }
                        Object parsedResponse = parseResponse(responseBodyString);
                        future.complete(new BaseClientHttpResponse<>(parsedResponse, response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new BaseClientApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            parseResponse(responseBodyString),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new BaseClientException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new BaseClientException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<BaseClientHttpResponse<Object>> delete(String url64, ProxyDeleteRequest request) {
        return delete(url64, request, null);
    }

    public CompletableFuture<BaseClientHttpResponse<Object>> delete(
            String url64, ProxyDeleteRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("proxy")
                .addPathSegment(url64);
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        QueryStringMapper.addQueryParameter(httpUrl, "account_id", request.getAccountId(), false);
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<BaseClientHttpResponse<Object>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        String responseBodyString = responseBody != null ? responseBody.string() : null;
                        if (responseBodyString == null || responseBodyString.trim().isEmpty()) {
                            future.complete(new BaseClientHttpResponse<>(null, response));
                            return;
                        }
                        Object parsedResponse = parseResponse(responseBodyString);
                        future.complete(new BaseClientHttpResponse<>(parsedResponse, response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new BaseClientApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            parseResponse(responseBodyString),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new BaseClientException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new BaseClientException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<BaseClientHttpResponse<Object>> patch(String url64, ProxyPatchRequest request) {
        return patch(url64, request, null);
    }

    public CompletableFuture<BaseClientHttpResponse<Object>> patch(
            String url64, ProxyPatchRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("proxy")
                .addPathSegment(url64);
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        QueryStringMapper.addQueryParameter(httpUrl, "account_id", request.getAccountId(), false);
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("PATCH", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<BaseClientHttpResponse<Object>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        String responseBodyString = responseBody != null ? responseBody.string() : null;
                        if (responseBodyString == null || responseBodyString.trim().isEmpty()) {
                            future.complete(new BaseClientHttpResponse<>(null, response));
                            return;
                        }
                        Object parsedResponse = parseResponse(responseBodyString);
                        future.complete(new BaseClientHttpResponse<>(parsedResponse, response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new BaseClientApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            parseResponse(responseBodyString),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new BaseClientException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new BaseClientException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
