/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.resources.proxy;

import com.pipedream.api.core.ClientOptions;
import com.pipedream.api.core.RequestOptions;
import com.pipedream.api.resources.proxy.requests.ProxyDeleteRequest;
import com.pipedream.api.resources.proxy.requests.ProxyGetRequest;
import com.pipedream.api.resources.proxy.requests.ProxyPatchRequest;
import com.pipedream.api.resources.proxy.requests.ProxyPostRequest;
import com.pipedream.api.resources.proxy.requests.ProxyPutRequest;
import java.util.Base64;
import java.util.concurrent.CompletableFuture;

public class AsyncProxyClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawProxyClient rawClient;

    public AsyncProxyClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawProxyClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawProxyClient withRawResponse() {
        return this.rawClient;
    }

    private String encodeUrl(String url) {
        return Base64.getUrlEncoder().encodeToString(url.getBytes());
    }

    public CompletableFuture<Object> get(String url, ProxyGetRequest request) {
        final String url64 = encodeUrl(url);
        return this.rawClient.get(url64, request).thenApply(response -> response.body());
    }

    public CompletableFuture<Object> get(String url, ProxyGetRequest request, RequestOptions requestOptions) {
        final String url64 = encodeUrl(url);
        return this.rawClient.get(url64, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Object> post(String url, ProxyPostRequest request) {
        final String url64 = encodeUrl(url);
        return this.rawClient.post(url64, request).thenApply(response -> response.body());
    }

    public CompletableFuture<Object> post(String url, ProxyPostRequest request, RequestOptions requestOptions) {
        final String url64 = encodeUrl(url);
        return this.rawClient.post(url64, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Object> put(String url, ProxyPutRequest request) {
        final String url64 = encodeUrl(url);
        return this.rawClient.put(url64, request).thenApply(response -> response.body());
    }

    public CompletableFuture<Object> put(String url, ProxyPutRequest request, RequestOptions requestOptions) {
        final String url64 = encodeUrl(url);
        return this.rawClient.put(url64, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Object> delete(String url, ProxyDeleteRequest request) {
        final String url64 = encodeUrl(url);
        return this.rawClient.delete(url64, request).thenApply(response -> response.body());
    }

    public CompletableFuture<Object> delete(String url, ProxyDeleteRequest request, RequestOptions requestOptions) {
        final String url64 = encodeUrl(url);
        return this.rawClient.delete(url64, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Object> patch(String url, ProxyPatchRequest request) {
        final String url64 = encodeUrl(url);
        return this.rawClient.patch(url64, request).thenApply(response -> response.body());
    }

    public CompletableFuture<Object> patch(String url, ProxyPatchRequest request, RequestOptions requestOptions) {
        final String url64 = encodeUrl(url);
        return this.rawClient.patch(url64, request, requestOptions).thenApply(response -> response.body());
    }
}
