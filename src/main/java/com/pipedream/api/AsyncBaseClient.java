/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api;

import com.pipedream.api.core.ClientOptions;
import com.pipedream.api.core.Suppliers;
import com.pipedream.api.resources.accounts.AsyncAccountsClient;
import com.pipedream.api.resources.actions.AsyncActionsClient;
import com.pipedream.api.resources.appcategories.AsyncAppCategoriesClient;
import com.pipedream.api.resources.apps.AsyncAppsClient;
import com.pipedream.api.resources.components.AsyncComponentsClient;
import com.pipedream.api.resources.deployedtriggers.AsyncDeployedTriggersClient;
import com.pipedream.api.resources.oauthtokens.AsyncOauthTokensClient;
import com.pipedream.api.resources.projects.AsyncProjectsClient;
import com.pipedream.api.resources.proxy.AsyncProxyClient;
import com.pipedream.api.resources.tokens.AsyncTokensClient;
import com.pipedream.api.resources.triggers.AsyncTriggersClient;
import com.pipedream.api.resources.users.AsyncUsersClient;
import com.pipedream.api.resources.workflows.AsyncWorkflowsClient;
import java.util.function.Supplier;

public class AsyncBaseClient {
    protected final ClientOptions clientOptions;

    protected final Supplier<AsyncAppCategoriesClient> appCategoriesClient;

    protected final Supplier<AsyncAppsClient> appsClient;

    protected final Supplier<AsyncAccountsClient> accountsClient;

    protected final Supplier<AsyncUsersClient> usersClient;

    protected final Supplier<AsyncComponentsClient> componentsClient;

    protected final Supplier<AsyncActionsClient> actionsClient;

    protected final Supplier<AsyncTriggersClient> triggersClient;

    protected final Supplier<AsyncDeployedTriggersClient> deployedTriggersClient;

    protected final Supplier<AsyncProjectsClient> projectsClient;

    protected final Supplier<AsyncProxyClient> proxyClient;

    protected final Supplier<AsyncTokensClient> tokensClient;

    protected final Supplier<AsyncOauthTokensClient> oauthTokensClient;

    protected final Supplier<AsyncWorkflowsClient> workflowsClient;

    public AsyncBaseClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.appCategoriesClient = Suppliers.memoize(() -> new AsyncAppCategoriesClient(clientOptions));
        this.appsClient = Suppliers.memoize(() -> new AsyncAppsClient(clientOptions));
        this.accountsClient = Suppliers.memoize(() -> new AsyncAccountsClient(clientOptions));
        this.usersClient = Suppliers.memoize(() -> new AsyncUsersClient(clientOptions));
        this.componentsClient = Suppliers.memoize(() -> new AsyncComponentsClient(clientOptions));
        this.actionsClient = Suppliers.memoize(() -> new AsyncActionsClient(clientOptions));
        this.triggersClient = Suppliers.memoize(() -> new AsyncTriggersClient(clientOptions));
        this.deployedTriggersClient = Suppliers.memoize(() -> new AsyncDeployedTriggersClient(clientOptions));
        this.projectsClient = Suppliers.memoize(() -> new AsyncProjectsClient(clientOptions));
        this.proxyClient = Suppliers.memoize(() -> new AsyncProxyClient(clientOptions));
        this.tokensClient = Suppliers.memoize(() -> new AsyncTokensClient(clientOptions));
        this.oauthTokensClient = Suppliers.memoize(() -> new AsyncOauthTokensClient(clientOptions));
        this.workflowsClient = Suppliers.memoize(() -> new AsyncWorkflowsClient(clientOptions));
    }

    public AsyncAppCategoriesClient appCategories() {
        return this.appCategoriesClient.get();
    }

    public AsyncAppsClient apps() {
        return this.appsClient.get();
    }

    public AsyncAccountsClient accounts() {
        return this.accountsClient.get();
    }

    public AsyncUsersClient users() {
        return this.usersClient.get();
    }

    public AsyncComponentsClient components() {
        return this.componentsClient.get();
    }

    public AsyncActionsClient actions() {
        return this.actionsClient.get();
    }

    public AsyncTriggersClient triggers() {
        return this.triggersClient.get();
    }

    public AsyncDeployedTriggersClient deployedTriggers() {
        return this.deployedTriggersClient.get();
    }

    public AsyncProjectsClient projects() {
        return this.projectsClient.get();
    }

    public AsyncProxyClient proxy() {
        return this.proxyClient.get();
    }

    public AsyncTokensClient tokens() {
        return this.tokensClient.get();
    }

    public AsyncOauthTokensClient oauthTokens() {
        return this.oauthTokensClient.get();
    }

    public AsyncWorkflowsClient workflows() {
        return this.workflowsClient.get();
    }

    public static AsyncBaseClientBuilder builder() {
        return new AsyncBaseClientBuilder();
    }
}
