/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api;

import com.pipedream.api.core.ClientOptions;
import com.pipedream.api.core.Environment;
import com.pipedream.api.core.OAuthTokenSupplier;
import com.pipedream.api.resources.oauthtokens.OauthTokensClient;
import okhttp3.OkHttpClient;

public class AsyncBaseClientBuilder {
    private ClientOptions.Builder clientOptionsBuilder = ClientOptions.builder();

    private String clientId = System.getenv("PIPEDREAM_CLIENT_ID");

    private String clientSecret = System.getenv("PIPEDREAM_CLIENT_SECRET");

    private String projectEnvironment = null;

    private Environment environment = Environment.PROD;

    /**
     * Sets clientId.
     * Defaults to the PIPEDREAM_CLIENT_ID environment variable.
     */
    public AsyncBaseClientBuilder clientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Sets clientSecret.
     * Defaults to the PIPEDREAM_CLIENT_SECRET environment variable.
     */
    public AsyncBaseClientBuilder clientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * Sets projectEnvironment
     */
    public AsyncBaseClientBuilder projectEnvironment(String projectEnvironment) {
        this.projectEnvironment = projectEnvironment;
        return this;
    }

    public AsyncBaseClientBuilder environment(Environment environment) {
        this.environment = environment;
        return this;
    }

    public AsyncBaseClientBuilder url(String url) {
        this.environment = Environment.custom(url);
        return this;
    }

    /**
     * Sets the timeout (in seconds) for the client. Defaults to 60 seconds.
     */
    public AsyncBaseClientBuilder timeout(int timeout) {
        this.clientOptionsBuilder.timeout(timeout);
        return this;
    }

    /**
     * Sets the maximum number of retries for the client. Defaults to 2 retries.
     */
    public AsyncBaseClientBuilder maxRetries(int maxRetries) {
        this.clientOptionsBuilder.maxRetries(maxRetries);
        return this;
    }

    /**
     * Sets the underlying OkHttp client
     */
    public AsyncBaseClientBuilder httpClient(OkHttpClient httpClient) {
        this.clientOptionsBuilder.httpClient(httpClient);
        return this;
    }

    public AsyncBaseClientBuilder projectId(String projectId) {
        clientOptionsBuilder.projectId(projectId);
        return this;
    }

    protected ClientOptions buildClientOptions() {
        clientOptionsBuilder.environment(this.environment);
        return clientOptionsBuilder.build();
    }

    public AsyncBaseClient build() {
        OauthTokensClient authClient = new OauthTokensClient(
                ClientOptions.builder().environment(this.environment).build());
        OAuthTokenSupplier oAuthTokenSupplier = new OAuthTokenSupplier(clientId, clientSecret, authClient);
        this.clientOptionsBuilder.addHeader("Authorization", oAuthTokenSupplier);
        if (projectEnvironment != null) {
            this.clientOptionsBuilder.addHeader("x-pd-environment", this.projectEnvironment);
        }
        return new AsyncBaseClient(buildClientOptions());
    }
}
